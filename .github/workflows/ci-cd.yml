name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: zoning_test
          POSTGRES_USER: zoning_user
          POSTGRES_PASSWORD: zoning_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database migrations (optional)
      run: |
        cd backend
        python -c "
        try:
            from app.core.database import create_tables
            from app.models import Document
            create_tables()
            print('Database tables created successfully')
        except Exception as e:
            print(f'Database migration failed (expected in CI): {e}')
            print('Continuing with tests...')
        "

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short

    - name: Run backend linter
      run: |
        cd backend
        pip install flake8 black isort
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check app/
        isort --check-only app/

  test-document-uploader:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd document-uploader
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flask-testing

    - name: Run document uploader tests
      run: |
        cd document-uploader
        python -m pytest test_app.py -v --tb=short

  docker-build-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/backend.Dockerfile
        push: false
        tags: zoning-backend:test

    - name: Build document uploader Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: document-uploader/Dockerfile
        push: false
        tags: document-uploader:test

  deploy:
    needs: [test-backend, test-document-uploader, docker-build-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: zoning-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "backend-image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build and push document uploader image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: document-uploader
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f document-uploader/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "uploader-image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to production
      run: |
        # Add deployment commands here
        # This could involve updating ECS services, Kubernetes deployments, etc.
        echo "Deployment commands would go here"
        echo "Backend image: ${{ steps.backend-image.outputs.image }}"
        echo "Uploader image: ${{ steps.uploader-image.outputs.image }}"
